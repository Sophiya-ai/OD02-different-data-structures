class Graph():


    def __init__(self):
        self.graph = {} #В этом словаре ключами будут выступать узлы графа,
                        # а значениями — списки, содержащие соседние узлы, с которыми есть соединение (ребро)

    def add_edge(self, u, v):
        if u not in self.graph:
            self.graph[u] = [] #добавляет `u` в граф как ключ и инициализирует его значение пустым списком
        self.graph[u].append(v)

    def print_graph(self):
        for node in self.graph:
            print(node, '->', '->'.join(map(str, self.graph[node])))

    #**map(str, self.graph[node])**:
   # - `self.graph` — это, видимо, словарь или аналогичная структура данных, представляющая граф,
        # где `node` — это ключ. Значение, связанное с этим ключом, вероятно, является списком или каким-то
        # итерируемым объектом, содержащим соседние узлы или связанные значения.
   # - `map(str, self.graph[node])` проходит по каждому элементу в `self.graph[node]` и применяет функцию `str`
        # к каждому элементу, то есть преобразует каждый элемент в строку. Это необходимо для того,
        # чтобы впоследствии можно было объединить эти элементы в одну строку с помощью метода `join()`

    #'->'.join(...)**:
        # объединяет все элементы итерируемого объекта (в данном случае, результат функции `map()`,
         # который является списком строк) в одну строку, вставляя между элементами указанный разделитель `'->'`


g = Graph()
g.add_edge(0, 1)
g.add_edge(0, 4)
g.add_edge(1, 2)
g.add_edge(1, 3)
g.add_edge(1, 4)
g.add_edge(2, 3)
g.add_edge(3, 4)

g.print_graph()
